<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on ZhenxingXu&#39;s Personal Blog</title>
    <link>https://hbjzxzx.github.io/tags/k8s/</link>
    <description>ZhenxingXu&#39;s Personal Blog (k8s)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Dec 2021 14:09:48 +0800</lastBuildDate>
    
    <atom:link href="https://hbjzxzx.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K8s Introduce</title>
      <link>https://hbjzxzx.github.io/posts/k8s/k8s_introduce/</link>
      <pubDate>Fri, 24 Dec 2021 14:09:48 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/k8s/k8s_introduce/</guid>
      <description>&lt;h1 id=&#34;feature-of-k8s&#34;&gt;Feature of k8s&lt;/h1&gt;
&lt;p&gt;Overview: managing containerized workloads and services using a declarative configuration and automation&lt;/p&gt;
&lt;p&gt;Kubernetes provides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Service discovery and load balancing&lt;/strong&gt;:  expose a container using the DNS name or own ip; and it can load balance the network traffic,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage orchestration&lt;/strong&gt;: mounts local storage system or public cloud providers and more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated rollouts and rollbacks&lt;/strong&gt;: you can describe the desired state for your deployed containers, k8s change the actual state to desired one at a controlled rate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic bin packing&lt;/strong&gt; : k8s schedule the containerized app using declarative resource quota, such cpu, men limits&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-healing&lt;/strong&gt;: healthy check and auto restart&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secret and configuration management&lt;/strong&gt;: store and manage sensitive information. Deploy and udpate secrets and application configuration.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;kubernetes-components&#34;&gt;Kubernetes Components&lt;/h1&gt;
&lt;p&gt;When you deploy Kubernetes, you get a &lt;strong&gt;cluster&lt;/strong&gt;;&lt;/p&gt;
&lt;p&gt;A cluster consists of a set of worker machines, called &lt;strong&gt;nodes&lt;/strong&gt;, cluster has at least one worker node&lt;/p&gt;
&lt;p&gt;A worker node host the &lt;strong&gt;Pods&lt;/strong&gt; that are the components of the application workload.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Control plane&lt;/strong&gt; control the worker &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;pods&lt;/strong&gt; in the cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High availability&lt;/strong&gt; are assured by running &lt;strong&gt;Control plane&lt;/strong&gt; cross multi host and multi host in cluster&lt;/p&gt;
&lt;h2 id=&#34;control-plane&#34;&gt;Control plane&lt;/h2&gt;
&lt;p&gt;control plane&amp;rsquo;s components work together to make global decisions about the cluster, as well as detecting and responding to cluster event. Its&#39; components can run on any machine in the cluster, however, they usually run on the same machine which dose not run any use containers. &lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/&#34;&gt;Create HA Control plane&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are 5 components in k8s&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kube-apiserver: front end for the Kubernetes control plane, which is designed to scale horizontally.&lt;/li&gt;
&lt;li&gt;Etc: highly-available key value store&lt;/li&gt;
&lt;li&gt;Kube-scheduler:&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>K8s Install Guide</title>
      <link>https://hbjzxzx.github.io/posts/k8s/install_k8s/</link>
      <pubDate>Fri, 24 Dec 2021 14:08:42 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/k8s/install_k8s/</guid>
      <description>&lt;h1 id=&#34;1-first-of-all-install-docker-or-you-can-use-runc-or-podman&#34;&gt;1. First of all install docker( or you can use runc or podman)&lt;/h1&gt;
&lt;p&gt;this can be found on docker website; After you had done, the following config is needed.&lt;/p&gt;
&lt;h2 id=&#34;config-the-cgroup&#34;&gt;config the cgroup&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config the docker to use systemd-cgroup&lt;/span&gt;
cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/docker/daemon.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;log-opts&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;config-the-locations-of-docker-by-rbing&#34;&gt;config the locations of docker by rbing&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# if you had used docker, you should clean the dir&lt;/span&gt;
sudo docker rm -f &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; docker rmi -f &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker images -q&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# stop the docker&lt;/span&gt;
sudo systemctl stop docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Remove the Docker storage directory&lt;/span&gt;
sudo rm -rf /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a new /var/liv/docker storage directory&lt;/span&gt;
sudo mkdir -p /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# use bind mount to set the new location.&lt;/span&gt;
sudo mkdir /mnt/docker
sudo mount --rbind /mnt/docker /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Start the docker service&lt;/span&gt;
sudo systemctl start docker 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-install-the-kubeadm-and-kubelet&#34;&gt;2. Install the Kubeadm and Kubelet&lt;/h1&gt;
&lt;h2 id=&#34;config-the-network&#34;&gt;Config the network&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;br_netfilter
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
sudo sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-the-tools&#34;&gt;Install the tools&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# udpate dep packages&lt;/span&gt;
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

&lt;span style=&#34;color:#75715e&#34;&gt;# import gpg keys&lt;/span&gt;
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

&lt;span style=&#34;color:#75715e&#34;&gt;# config some apt sources if you needed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# we use tsinghua and debian 9 as example&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb https://mirrors.tuna.tsinghua.edu.cn/kubernetes/apt  kubernetes-xenial main&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/source.list.d/kubernetes.list

&lt;span style=&#34;color:#75715e&#34;&gt;# update apt then install kubectl kubeadm and kubelet&lt;/span&gt;
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
&lt;span style=&#34;color:#75715e&#34;&gt;# hold the versions to prevent the auto-update&lt;/span&gt;
sudo apt-mark hold kubelet kubeadm kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
