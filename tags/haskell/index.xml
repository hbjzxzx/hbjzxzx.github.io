<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on ZhenxingXu&#39;s Personal Blog</title>
    <link>https://hbjzxzx.github.io/tags/haskell/</link>
    <description>ZhenxingXu&#39;s Personal Blog (haskell)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Dec 2021 14:06:00 +0800</lastBuildDate>
    
    <atom:link href="https://hbjzxzx.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monad</title>
      <link>https://hbjzxzx.github.io/posts/haskell/monad/</link>
      <pubDate>Fri, 24 Dec 2021 14:06:00 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/haskell/monad/</guid>
      <description>&lt;h1 id=&#34;monad&#34;&gt;Monad&lt;/h1&gt;
&lt;p&gt;Monad is uesed to gluing together monadic values in sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	return &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m a
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b
	x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; y
	fail &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In practice &lt;code&gt;do&lt;/code&gt; notaion is used to glue together several monadic values in a more readable way.&lt;/p&gt;
&lt;p&gt;or you can use &lt;code&gt;&amp;lt;=&amp;lt;&lt;/code&gt; to combine two fucntions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&amp;lt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; m ) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m c) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m c)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-monad&#34;&gt;Examples of Monad&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Control.Monad.Writer&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; w a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; {runWriter &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a, w)}
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; w) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; w) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	return x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (x, mempty)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (x, v)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (y, v&amp;#39;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f x &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt;(y, v `mappend` v&amp;#39;)
	tell m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; ((), m)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Functor_applicative_and_monoids</title>
      <link>https://hbjzxzx.github.io/posts/haskell/functor_applicative_and_monoids/</link>
      <pubDate>Fri, 24 Dec 2021 13:52:42 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/haskell/functor_applicative_and_monoids/</guid>
      <description>&lt;h1 id=&#34;functors&#34;&gt;Functors&lt;/h1&gt;
&lt;h2 id=&#34;sufficient-and-necessary-condition&#34;&gt;Sufficient and Necessary condition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;it has a kind of &lt;code&gt;* -&amp;gt; *&lt;/code&gt;, which means that it accpets a concrete type and return a concrete type&lt;/li&gt;
&lt;li&gt;it has a function &lt;code&gt;fmap :: Functor f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;
the actually definition is:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	fmap &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-functor&#34;&gt;Examples of Functor&lt;/h2&gt;
&lt;p&gt;If Something is has a typeclass of Functors, it means that it can &lt;strong&gt;be mapped over&lt;/strong&gt;; &amp;ldquo;Be Mapped Over&amp;rdquo; means that
functions out of the functors have a universal behavior of entering into the Functors.&lt;/p&gt;
&lt;p&gt;Actually, you can think Functors as a &lt;strong&gt;&amp;lsquo;Context&amp;rsquo;&lt;/strong&gt; that wrap the real value. Context may be any thing that attached to the value,  it can be
records which trace the inner value changes, the info which deal with the invalidate values, and the &lt;strong&gt;Side effect&lt;/strong&gt; which came long with the value.
Here are some examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; is a Functor: the outside function &amp;lsquo;enters&amp;rsquo; the list, then it should affect all the elements in list one by one;
The &lt;code&gt;List&lt;/code&gt; Context can be seen as undetermined computation.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; f axs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; axs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;Maybe&lt;/code&gt; Maybe Functor: the outside function &amp;lsquo;enters&amp;rsquo; the Maybe functor, then it get the ability of handing invalidated value.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; b
&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; f mayA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; mayA &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (f a)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;IO&lt;/code&gt; IO Functor: the &lt;code&gt;IO&lt;/code&gt; wraps the computation with &lt;strong&gt;Side effect&lt;/strong&gt;, this means that you can never extra a value out of Context in Haskell just like the &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt;; But you can use the &lt;code&gt;fmap&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt; notaion.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;	fmap &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; b
	fmap f action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
		result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; action
		return (f result)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;(-&amp;gt;)r&lt;/code&gt; Computation functor: Maybe functor can be viewed as the container, in which the value just stay there. However the &lt;code&gt;(-&amp;gt;)r&lt;/code&gt; is close to &lt;code&gt;IO&lt;/code&gt;, both of which will do something perform to get the final value. The value in computaion functor.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- in Control.Monad.Instance&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) r) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	fmap f g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f (g x))
&lt;span style=&#34;color:#75715e&#34;&gt;-- or you can&lt;/span&gt;
	fmap f g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;law-of-functor&#34;&gt;Law of Functor&lt;/h2&gt;
&lt;p&gt;All functors have method: &lt;code&gt;fmap :: (a-&amp;gt;b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;, which can  be curried as &lt;code&gt;fmap oridinary_f :: f a -&amp;gt; f b&lt;/code&gt;. It seems as if the &lt;code&gt;oridinary_f&lt;/code&gt; has been &lt;strong&gt;lifted&lt;/strong&gt; to some functor context. To keep the semantic of &lt;strong&gt;lifting function&lt;/strong&gt;, the functor should keep two laws:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fmap id = id&lt;/code&gt; &amp;mdash;&amp;gt;  id function holds after mapping&lt;/li&gt;
&lt;li&gt;`fmap (f . g) = (fmap f).(fmap g) &amp;mdash;&amp;gt; compositional order holds after mapping&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;application-functors&#34;&gt;Application functors&lt;/h1&gt;
&lt;p&gt;We say that functors are some context that holds or computes the final value, and &lt;code&gt;fmap&lt;/code&gt; can lift the trivial function into that context. The signature: &lt;code&gt;fmap :: (a-&amp;gt;b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt; means that only unary functions can be lifted, how about functions whose number of parameters is more than 2?&lt;/p&gt;
&lt;p&gt;Thanks to curried function or partially apply function, all the functions can be viewed as unary operator. So if we use &lt;code&gt;fmap (*) (Just 3)&lt;/code&gt;, we get &lt;code&gt;Just (* 3)&lt;/code&gt; which is actually a function in Maybe functor. Application can let these functions wrapped by context keep go working under context.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- in Control.Applicative&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; f (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pure (+) &amp;lt;*&amp;gt; (Just 1) &amp;lt;*&amp;gt; (Just 1)&lt;/code&gt; will eval to &lt;code&gt;Just 2&lt;/code&gt;, There is a syntax sugar to avoid using pure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f x
&lt;span style=&#34;color:#f92672&#34;&gt;##&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Examples&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;List&lt;/span&gt;
```haskell
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x]
	fs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f x &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; fs, x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;(-&amp;gt;)r&lt;/code&gt;: form the follwing definition we find that some evaluation ordered are defined in computation context.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;)r) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x)
	&lt;span style=&#34;color:#75715e&#34;&gt;-- fist f will be evaluated to get the functions&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- then g will be evaluated to get the values&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- apply the function and value&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- use lambda to wrap the result&lt;/span&gt;
	f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f x (g x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;ZipList: another context meaning of List functor&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- value will wrap into a infinite list	&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; (repeat x)
	&lt;span style=&#34;color:#75715e&#34;&gt;-- using the bitwise style to handle List Context&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; fs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt;(zipWith (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;f x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f x) fs xs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;useful-functions-about-applicative&#34;&gt;Useful functions about Applicative&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;liftA2&lt;/code&gt;: list a binary function into applicative&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;liftA2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f c
&lt;span style=&#34;color:#a6e22e&#34;&gt;liftA2&lt;/span&gt; f a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;sequenceA&lt;/code&gt;: Combine any amount of applicatives into one applicative that has a list of the results of those applicatives inside it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [f a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; (x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; xs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; sequenceA xs
&lt;span style=&#34;color:#75715e&#34;&gt;-- with the help of liftA2&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldr (liftA2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;)) (pure &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;law-of-applicative&#34;&gt;Law of Applicative&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure id &amp;lt;*&amp;gt; v = fmap id v = v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;monoids&#34;&gt;Monoids&lt;/h1&gt;
&lt;p&gt;A monoid is a semi-group with an identity element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	mempty &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m
	mappend &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m
	mconcat &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [m] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m
	moncat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldr mappend mempty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-monoids&#34;&gt;Examples of Monoids&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; [a] &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	mempty &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
	mappend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Product and Sum, Any and All&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {getProduct &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Ord&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Read&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Bounded&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Num&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; a) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; 
	mempty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; x `mappend` &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Ordering Monoid&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
