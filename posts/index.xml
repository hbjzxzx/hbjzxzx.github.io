<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZhenxingXu&#39;s Personal Blog</title>
    <link>https://hbjzxzx.github.io/posts/</link>
    <description>ZhenxingXu&#39;s Personal Blog (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Dec 2021 12:08:19 +0800</lastBuildDate>
    
    <atom:link href="https://hbjzxzx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>70_Climbing_Stairs</title>
      <link>https://hbjzxzx.github.io/posts/alog/dp_practice/70_climbing_stairs/</link>
      <pubDate>Sun, 26 Dec 2021 12:08:19 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/alog/dp_practice/70_climbing_stairs/</guid>
      <description>&lt;h1 id=&#34;climbing-stairs&#34;&gt;Climbing Stairs&lt;/h1&gt;
&lt;p&gt;You are climbing a staircase. It takes &lt;code&gt;n&lt;/code&gt; steps to reach the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?&lt;/p&gt;
&lt;p&gt;Original problem &lt;a href=&#34;https://leetcode-cn.com/problems/climbing-stairs&#34;&gt;Leetcode 70&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;recursive-code&#34;&gt;Recursive code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use the recursice f(n) = f(n-1) + f(n-2) for all n &amp;gt; 2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;climbStairs&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
  	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
  	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# you can also use cache to boost up&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;iterate&#34;&gt;Iterate&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dropwhile
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;climbStairs&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        infinite_series &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; enumerate(Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;series())
        infinite_series &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dropwhile(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, infinite_series)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next(infinite_series)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;series&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[int]:
        s1, s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; s1
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; s2
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2
            s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2
            s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; s2
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;matrix-multiply&#34;&gt;Matrix Multiply&lt;/h2&gt;
&lt;p&gt;Notice that the iterating states of f(n) = f(n-1) + f(n-2) can be described by matrix multiply
$$
\begin{align}
\begin{bmatrix}f(n)\ f(n-1)\end{bmatrix}
= \begin{bmatrix}1&amp;amp; 1\ 1 &amp;amp; 0\\end{bmatrix}
* \begin{bmatrix}f(n-1) \ f(n-2)\end{bmatrix}
\
\begin{bmatrix}f(n) \ f(n-1)\end{bmatrix}
=\begin{bmatrix}1 &amp;amp; 1\ 1 &amp;amp; 0\end{bmatrix}^{n-2}
* \begin{bmatrix} f(2) \ f(1) \end{bmatrix}
\end{align}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; copy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; deepcopy
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy
M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Iterable[Iterable[int]]
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;climbStairs&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        transform_matrix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        init_vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,))
        get_matrix_r1_c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: next(next(m))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
           &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; get_matrix_r1_c1(Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix_mul(
           Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix2_power(transform_matrix, n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
           init_vector
            ))
       

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix2_power&lt;/span&gt;(matrix: M, pow: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; M:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#75715e&#34;&gt;# power a row major matrix&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; matrix
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix_mul(matrix, matrix)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix2_power(
                Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix2_power(matrix, pow&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix_mul(
                matrix,
                Solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix2_power(matrix, pow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            )
            
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix_mul&lt;/span&gt;(ma: M, mb: M) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; M:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ma &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; mb:
            mb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; deepcopy(ma)
        mb_col_major &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(zip(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;mb))
        col_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(mb_col_major) 
        sum_vecs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; vecs: map(sum, zip(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vecs))
        vec_multi_scalar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; vec, scalar: map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; raw: raw&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;scalar, vec)
        matrix_multi_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; matrix, vec: sum_vecs(map(vec_multi_scalar, matrix, vec))
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; matrix, col_vec: matrix_multi_vec(matrix, col_vec), 
                        [deepcopy(m) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; repeat(ma, col_size)], 
                        mb_col_major)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Ch2_divede_conquer</title>
      <link>https://hbjzxzx.github.io/posts/alog/ch2_divede_conquer/</link>
      <pubDate>Sun, 26 Dec 2021 11:44:19 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/alog/ch2_divede_conquer/</guid>
      <description>&lt;h1 id=&#34;divide-and-conquer&#34;&gt;Divide And Conquer&lt;/h1&gt;
&lt;h2 id=&#34;1-divide-the-problem-into-one-or-some-subproblems&#34;&gt;1. Divide the problem into one or some subproblems&lt;/h2&gt;
&lt;h2 id=&#34;2-conquer-each-subproblem-recursively&#34;&gt;2. Conquer each subproblem recursively&lt;/h2&gt;
&lt;h2 id=&#34;3-combine-solutions&#34;&gt;3. Combine solutions&lt;/h2&gt;
&lt;h2 id=&#34;ex1-merge-sort&#34;&gt;Ex1 Merge Sort&lt;/h2&gt;
&lt;h2 id=&#34;divide-trivial-just-divice-it-into-half&#34;&gt;Divide: trivial, just divice it into half!&lt;/h2&gt;
&lt;h2 id=&#34;conquer-recursively-solves-each-array&#34;&gt;Conquer: recursively solves each array&lt;/h2&gt;
&lt;h2 id=&#34;combine-merge-the-tow-ordered-array&#34;&gt;Combine: Merge the tow ordered array&lt;/h2&gt;
&lt;h3 id=&#34;running-time-tn2tfracn2--n-that-is-on-lg-n&#34;&gt;Running Time: $T(n)=2T(\frac{n}{2}) + n$ that is $O(n \lg n)$&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge_sort&lt;/span&gt;(array: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
    a_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(array)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a_len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; array
    fst, snd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array[:a_len&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], array[a_len&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:]
    fst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merge_sort(fst)
    snd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merge_sort(snd)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; merge(fst, snd)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(xs1: List[int], xs2: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; xs1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; xs2:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xs1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; xs2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(xs2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
            xs2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xs2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; xs1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; xs2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(xs1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
            xs1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xs1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xs1:
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(xs1) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xs2:
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(xs2)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

l, r, max_len, arr_cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
rand_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; alen: [randint(l, r) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(alen)], 
                    [randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, max_len) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(arr_cnt) ]) 
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arr &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(rand_list):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; merge_sort(arr) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sorted(arr)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;assert failed, original: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;arr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, std: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sorted(arr)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, my:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;merge_sort(arr)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ex2-binary-search&#34;&gt;Ex2 Binary Search&lt;/h2&gt;
&lt;h2 id=&#34;divide-compare-x-with-middle-elem-in-array&#34;&gt;Divide: compare x with middle elem in array&lt;/h2&gt;
&lt;h2 id=&#34;conquer-recurse-in-one-subarray&#34;&gt;Conquer: recurse in one subarray&lt;/h2&gt;
&lt;h2 id=&#34;combine-trivial-nothing-to-do&#34;&gt;Combine: trivial, nothing to do!&lt;/h2&gt;
&lt;h3 id=&#34;running-time-tntfracn2o1-that-is-olg-n&#34;&gt;Running Time: $T(n)=T(\frac{n}{2})+O(1)$ that is $O(\lg n)$&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(arr: List[int], lo:int, hi:int, num: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lo &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hi:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hi) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arr[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; num:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; binary_search(arr, lo, mid, num)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; arr[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; binary_search(arr, mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, hi, num)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid

l, r, ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;
rand_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted([randint(l, r) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ll)])
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;)):
    sel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        find_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary_search(rand_list, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(rand_list), rand_list[sel])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; rand_list[find_index] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rand_list[sel]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;epect :&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sel&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, return &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;find_index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, input: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;rand_list&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ex3-powwering-a-number-given-number-x-integer-n-ge-0-compute-xn&#34;&gt;Ex3 Powwering a number: given number x, integer $n \ge 0$, compute $x^n$&lt;/h2&gt;
&lt;h2 id=&#34;divide&#34;&gt;Divide:&lt;/h2&gt;
&lt;p&gt;$$
sign(x) = \left{
\begin{aligned}
x^{\frac{n}{2}} \cdot x^{\frac{n}{2}} \quad even \&lt;/p&gt;
&lt;p&gt;x^{\frac{n-1}{2}} \cdot x^{\frac{n-1}{2}} \cdot x \quad odd \
\end{aligned}
\right.
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt;(x: float, y: float) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int :
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; power(x, (y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; power(x, (y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; power(x, y&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; power(x, y&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
base_power_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;), randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(cnt)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; all(
    map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; b, p: (b&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; power(b, p))&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;zip(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;base_power_list))
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ex4-fibonacci-numbers&#34;&gt;Ex4 Fibonacci numbers&lt;/h2&gt;
&lt;p&gt;Divide:
$$
\begin{pmatrix} f_{n+1} &amp;amp; f_{n} \ f_{n} &amp;amp; f_{n-1} \end{pmatrix} =
\begin{pmatrix} 1 &amp;amp; 1 \ 1 &amp;amp; 0 \end{pmatrix}^n
$$&lt;/p&gt;
&lt;h2 id=&#34;matrix-multiplicationstrassens-algorithm&#34;&gt;Matrix multiplication(strassen&amp;rsquo;s algorithm)&lt;/h2&gt;
&lt;h2 id=&#34;vlsi-layout-find-layout-that-make-a-complete-binary-tree-with-n-leaves-have-mininal-area&#34;&gt;VLSI layout: find layout that make a complete binary tree with n leaves have mininal area&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>State_pattern</title>
      <link>https://hbjzxzx.github.io/posts/temp_note/state_pattern/</link>
      <pubDate>Sun, 26 Dec 2021 11:43:40 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/temp_note/state_pattern/</guid>
      <description>&lt;p&gt;Design patterns are conventional solutions to common chanllenges in software development using OO. One of the famous pattern is state pattern&lt;/p&gt;
&lt;h1 id=&#34;finite-state-machine&#34;&gt;Finite State Machine&lt;/h1&gt;
&lt;p&gt;A FSM is something that behaves differently depending on its internal state. That is the behaves of an object depending on its state.&lt;/p&gt;
&lt;p&gt;A simple example is light bulb object, the follwing code is straightforward and simple, however if there are many &lt;strong&gt;states&lt;/strong&gt; and &lt;strong&gt;transitions&lt;/strong&gt; thing will get complex. To  simplies this, we can use State Pattern.&lt;/p&gt;
&lt;p&gt;The core idea of FSM is the behavior depending on the states! We should focus on state-specific behavior and the transitions of states.&lt;/p&gt;
&lt;h2 id=&#34;uml-diagram&#34;&gt;UML Diagram&lt;/h2&gt;
&lt;p&gt;The original class keeps a reference to state object based on its state rather than using conditional statements to implement state-specific function&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduce</title>
      <link>https://hbjzxzx.github.io/posts/distr_sys/introduce/</link>
      <pubDate>Sun, 26 Dec 2021 11:42:20 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/distr_sys/introduce/</guid>
      <description>&lt;h1 id=&#34;target-of-distributed-system&#34;&gt;Target of distributed system&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Parallelism(Perfermance)&lt;/li&gt;
&lt;li&gt;Fault tolerance&lt;/li&gt;
&lt;li&gt;Physical distributed&lt;/li&gt;
&lt;li&gt;security/isolated&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;challenge&#34;&gt;challenge&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;concurrency&lt;/li&gt;
&lt;li&gt;partial failure&lt;/li&gt;
&lt;li&gt;perfermance&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;example-mapreduce&#34;&gt;example MapReduce&lt;/h1&gt;
&lt;h2 id=&#34;mapreduce-simplified-data-processing-on-large-clusters&#34;&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;/h2&gt;
&lt;p&gt;A new abstraction that allow us to express the simple computations we were trying to perform but hides the messy details of parallelization, fault-tolerance, data distribution and load balancing.
This abstraction is inspired by the map and reduce primitives present in Lisp and many other functional language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduce</title>
      <link>https://hbjzxzx.github.io/posts/category/introduce/</link>
      <pubDate>Sun, 26 Dec 2021 11:41:38 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/category/introduce/</guid>
      <description>&lt;p&gt;In general, there are two method to handle complex problem using an OOP Style; The one is Abstract, the other is seal; Things become uncontrollable when encountering parallelism case; Data sharing and data consistent challenges a lot;&lt;/p&gt;
&lt;p&gt;The Functional Style which based on Lambda Calculation computation module is an alternative method to overcome it; Compared to traditional Imperative languages such as c, cpp, python, which use the Turning  machine as computering model, the functional language provids a higher layer to model the computation&lt;/p&gt;
&lt;h1 id=&#34;category&#34;&gt;Category&lt;/h1&gt;
&lt;p&gt;observing thign on higher level;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Define&lt;/strong&gt; : A Category consist of objects and morphism which connecting objects on one direction.&lt;/p&gt;
&lt;p&gt;From the functions‘ &lt;strong&gt;domain&lt;/strong&gt; and &lt;strong&gt;codomain&lt;/strong&gt; ，and its &lt;strong&gt;image&lt;/strong&gt; we  divide the functions into surjection nad injection. Using a similary conception, we can also have monomorphism and epicmorphism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Isomorphism&lt;/strong&gt; is a morphism which is both monomorphism and empicmorphism&lt;/p&gt;
&lt;h3 id=&#34;to-do-how-to-define-the-monoepic-morphism-without-looking-inside-the-concrete-elements-in-set&#34;&gt;to do how to define the mono,epic morphism without looking inside the concrete elements in set;&lt;/h3&gt;
&lt;h2 id=&#34;special-objects&#34;&gt;Special objects&lt;/h2&gt;
&lt;h3 id=&#34;terminal-objects&#34;&gt;Terminal objects&lt;/h3&gt;
&lt;p&gt;$$
\forall a \exist f:: a\to() \
\forall f::a\to(), \forall f::b\to() &lt;br&gt;
$$&lt;/p&gt;
&lt;p&gt;if we reverse all the morphism, then () is called init object&lt;/p&gt;
&lt;h2 id=&#34;products-and-co-product&#34;&gt;Products and Co-Product&lt;/h2&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>K8s Introduce</title>
      <link>https://hbjzxzx.github.io/posts/k8s/k8s_introduce/</link>
      <pubDate>Fri, 24 Dec 2021 14:09:48 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/k8s/k8s_introduce/</guid>
      <description>&lt;h1 id=&#34;feature-of-k8s&#34;&gt;Feature of k8s&lt;/h1&gt;
&lt;p&gt;Overview: managing containerized workloads and services using a declarative configuration and automation&lt;/p&gt;
&lt;p&gt;Kubernetes provides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Service discovery and load balancing&lt;/strong&gt;:  expose a container using the DNS name or own ip; and it can load balance the network traffic,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage orchestration&lt;/strong&gt;: mounts local storage system or public cloud providers and more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated rollouts and rollbacks&lt;/strong&gt;: you can describe the desired state for your deployed containers, k8s change the actual state to desired one at a controlled rate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic bin packing&lt;/strong&gt; : k8s schedule the containerized app using declarative resource quota, such cpu, men limits&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-healing&lt;/strong&gt;: healthy check and auto restart&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secret and configuration management&lt;/strong&gt;: store and manage sensitive information. Deploy and udpate secrets and application configuration.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;kubernetes-components&#34;&gt;Kubernetes Components&lt;/h1&gt;
&lt;p&gt;When you deploy Kubernetes, you get a &lt;strong&gt;cluster&lt;/strong&gt;;&lt;/p&gt;
&lt;p&gt;A cluster consists of a set of worker machines, called &lt;strong&gt;nodes&lt;/strong&gt;, cluster has at least one worker node&lt;/p&gt;
&lt;p&gt;A worker node host the &lt;strong&gt;Pods&lt;/strong&gt; that are the components of the application workload.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Control plane&lt;/strong&gt; control the worker &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;pods&lt;/strong&gt; in the cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High availability&lt;/strong&gt; are assured by running &lt;strong&gt;Control plane&lt;/strong&gt; cross multi host and multi host in cluster&lt;/p&gt;
&lt;h2 id=&#34;control-plane&#34;&gt;Control plane&lt;/h2&gt;
&lt;p&gt;control plane&amp;rsquo;s components work together to make global decisions about the cluster, as well as detecting and responding to cluster event. Its&#39; components can run on any machine in the cluster, however, they usually run on the same machine which dose not run any use containers. &lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/&#34;&gt;Create HA Control plane&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are 5 components in k8s&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kube-apiserver: front end for the Kubernetes control plane, which is designed to scale horizontally.&lt;/li&gt;
&lt;li&gt;Etc: highly-available key value store&lt;/li&gt;
&lt;li&gt;Kube-scheduler:&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>K8s Install Guide</title>
      <link>https://hbjzxzx.github.io/posts/k8s/install_k8s/</link>
      <pubDate>Fri, 24 Dec 2021 14:08:42 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/k8s/install_k8s/</guid>
      <description>&lt;h1 id=&#34;1-first-of-all-install-docker-or-you-can-use-runc-or-podman&#34;&gt;1. First of all install docker( or you can use runc or podman)&lt;/h1&gt;
&lt;p&gt;this can be found on docker website; After you had done, the following config is needed.&lt;/p&gt;
&lt;h2 id=&#34;config-the-cgroup&#34;&gt;config the cgroup&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config the docker to use systemd-cgroup&lt;/span&gt;
cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/docker/daemon.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;log-opts&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;config-the-locations-of-docker-by-rbing&#34;&gt;config the locations of docker by rbing&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# if you had used docker, you should clean the dir&lt;/span&gt;
sudo docker rm -f &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; docker rmi -f &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker images -q&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# stop the docker&lt;/span&gt;
sudo systemctl stop docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Remove the Docker storage directory&lt;/span&gt;
sudo rm -rf /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a new /var/liv/docker storage directory&lt;/span&gt;
sudo mkdir -p /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# use bind mount to set the new location.&lt;/span&gt;
sudo mkdir /mnt/docker
sudo mount --rbind /mnt/docker /var/lib/docker

&lt;span style=&#34;color:#75715e&#34;&gt;# Start the docker service&lt;/span&gt;
sudo systemctl start docker 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-install-the-kubeadm-and-kubelet&#34;&gt;2. Install the Kubeadm and Kubelet&lt;/h1&gt;
&lt;h2 id=&#34;config-the-network&#34;&gt;Config the network&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;br_netfilter
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
sudo sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-the-tools&#34;&gt;Install the tools&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# udpate dep packages&lt;/span&gt;
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

&lt;span style=&#34;color:#75715e&#34;&gt;# import gpg keys&lt;/span&gt;
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

&lt;span style=&#34;color:#75715e&#34;&gt;# config some apt sources if you needed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# we use tsinghua and debian 9 as example&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb https://mirrors.tuna.tsinghua.edu.cn/kubernetes/apt  kubernetes-xenial main&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/source.list.d/kubernetes.list

&lt;span style=&#34;color:#75715e&#34;&gt;# update apt then install kubectl kubeadm and kubelet&lt;/span&gt;
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
&lt;span style=&#34;color:#75715e&#34;&gt;# hold the versions to prevent the auto-update&lt;/span&gt;
sudo apt-mark hold kubelet kubeadm kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Monad</title>
      <link>https://hbjzxzx.github.io/posts/haskell/monad/</link>
      <pubDate>Fri, 24 Dec 2021 14:06:00 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/haskell/monad/</guid>
      <description>&lt;h1 id=&#34;monad&#34;&gt;Monad&lt;/h1&gt;
&lt;p&gt;Monad is uesed to gluing together monadic values in sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	return &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m a
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b
	x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; y
	fail &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In practice &lt;code&gt;do&lt;/code&gt; notaion is used to glue together several monadic values in a more readable way.&lt;/p&gt;
&lt;p&gt;or you can use &lt;code&gt;&amp;lt;=&amp;lt;&lt;/code&gt; to combine two fucntions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&amp;lt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; m ) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m c) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m c)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-monad&#34;&gt;Examples of Monad&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Control.Monad.Writer&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; w a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; {runWriter &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a, w)}
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; w) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; w) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	return x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (x, mempty)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (x, v)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; (y, v&amp;#39;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f x &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt;(y, v `mappend` v&amp;#39;)
	tell m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; ((), m)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Control.Monad.Writer
&lt;span style=&#34;color:#a6e22e&#34;&gt;my_gcd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Writer&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;my_gcd&lt;/span&gt; a b
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        tell [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Finished with &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; show a]
        return a
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        tell [show a &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; mod &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; show b &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; show (a `mod` b)]
        my_gcd b (a `mod` b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Functor_applicative_and_monoids</title>
      <link>https://hbjzxzx.github.io/posts/haskell/functor_applicative_and_monoids/</link>
      <pubDate>Fri, 24 Dec 2021 13:52:42 +0800</pubDate>
      
      <guid>https://hbjzxzx.github.io/posts/haskell/functor_applicative_and_monoids/</guid>
      <description>&lt;h1 id=&#34;functors&#34;&gt;Functors&lt;/h1&gt;
&lt;h2 id=&#34;sufficient-and-necessary-condition&#34;&gt;Sufficient and Necessary condition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;it has a kind of &lt;code&gt;* -&amp;gt; *&lt;/code&gt;, which means that it accpets a concrete type and return a concrete type&lt;/li&gt;
&lt;li&gt;it has a function &lt;code&gt;fmap :: Functor f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;
the actually definition is:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	fmap &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-functor&#34;&gt;Examples of Functor&lt;/h2&gt;
&lt;p&gt;If Something is has a typeclass of Functors, it means that it can &lt;strong&gt;be mapped over&lt;/strong&gt;; &amp;ldquo;Be Mapped Over&amp;rdquo; means that
functions out of the functors have a universal behavior of entering into the Functors.&lt;/p&gt;
&lt;p&gt;Actually, you can think Functors as a &lt;strong&gt;&amp;lsquo;Context&amp;rsquo;&lt;/strong&gt; that wrap the real value. Context may be any thing that attached to the value,  it can be
records which trace the inner value changes, the info which deal with the invalidate values, and the &lt;strong&gt;Side effect&lt;/strong&gt; which came long with the value.
Here are some examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; is a Functor: the outside function &amp;lsquo;enters&amp;rsquo; the list, then it should affect all the elements in list one by one;
The &lt;code&gt;List&lt;/code&gt; Context can be seen as undetermined computation.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; f axs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; axs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;Maybe&lt;/code&gt; Maybe Functor: the outside function &amp;lsquo;enters&amp;rsquo; the Maybe functor, then it get the ability of handing invalidated value.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; b
&lt;span style=&#34;color:#a6e22e&#34;&gt;fmap&lt;/span&gt; f mayA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; mayA &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (f a)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;IO&lt;/code&gt; IO Functor: the &lt;code&gt;IO&lt;/code&gt; wraps the computation with &lt;strong&gt;Side effect&lt;/strong&gt;, this means that you can never extra a value out of Context in Haskell just like the &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt;; But you can use the &lt;code&gt;fmap&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt; notaion.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;	fmap &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; b
	fmap f action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
		result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; action
		return (f result)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;(-&amp;gt;)r&lt;/code&gt; Computation functor: Maybe functor can be viewed as the container, in which the value just stay there. However the &lt;code&gt;(-&amp;gt;)r&lt;/code&gt; is close to &lt;code&gt;IO&lt;/code&gt;, both of which will do something perform to get the final value. The value in computaion functor.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- in Control.Monad.Instance&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) r) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	fmap f g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f (g x))
&lt;span style=&#34;color:#75715e&#34;&gt;-- or you can&lt;/span&gt;
	fmap f g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;law-of-functor&#34;&gt;Law of Functor&lt;/h2&gt;
&lt;p&gt;All functors have method: &lt;code&gt;fmap :: (a-&amp;gt;b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;, which can  be curried as &lt;code&gt;fmap oridinary_f :: f a -&amp;gt; f b&lt;/code&gt;. It seems as if the &lt;code&gt;oridinary_f&lt;/code&gt; has been &lt;strong&gt;lifted&lt;/strong&gt; to some functor context. To keep the semantic of &lt;strong&gt;lifting function&lt;/strong&gt;, the functor should keep two laws:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fmap id = id&lt;/code&gt; &amp;mdash;&amp;gt;  id function holds after mapping&lt;/li&gt;
&lt;li&gt;`fmap (f . g) = (fmap f).(fmap g) &amp;mdash;&amp;gt; compositional order holds after mapping&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;application-functors&#34;&gt;Application functors&lt;/h1&gt;
&lt;p&gt;We say that functors are some context that holds or computes the final value, and &lt;code&gt;fmap&lt;/code&gt; can lift the trivial function into that context. The signature: &lt;code&gt;fmap :: (a-&amp;gt;b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt; means that only unary functions can be lifted, how about functions whose number of parameters is more than 2?&lt;/p&gt;
&lt;p&gt;Thanks to curried function or partially apply function, all the functions can be viewed as unary operator. So if we use &lt;code&gt;fmap (*) (Just 3)&lt;/code&gt;, we get &lt;code&gt;Just (* 3)&lt;/code&gt; which is actually a function in Maybe functor. Application can let these functions wrapped by context keep go working under context.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- in Control.Applicative&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a
	(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; f (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pure (+) &amp;lt;*&amp;gt; (Just 1) &amp;lt;*&amp;gt; (Just 1)&lt;/code&gt; will eval to &lt;code&gt;Just 2&lt;/code&gt;, There is a syntax sugar to avoid using pure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f x
&lt;span style=&#34;color:#f92672&#34;&gt;##&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Examples&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;List&lt;/span&gt;
```haskell
&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x]
	fs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f x &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; fs, x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;(-&amp;gt;)r&lt;/code&gt;: form the follwing definition we find that some evaluation ordered are defined in computation context.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;)r) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x)
	&lt;span style=&#34;color:#75715e&#34;&gt;-- fist f will be evaluated to get the functions&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- then g will be evaluated to get the values&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- apply the function and value&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- use lambda to wrap the result&lt;/span&gt;
	f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f x (g x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;ZipList: another context meaning of List functor&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;-- value will wrap into a infinite list	&lt;/span&gt;
	pure x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; (repeat x)
	&lt;span style=&#34;color:#75715e&#34;&gt;-- using the bitwise style to handle List Context&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; fs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ZipList&lt;/span&gt;(zipWith (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;f x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f x) fs xs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;useful-functions-about-applicative&#34;&gt;Useful functions about Applicative&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;liftA2&lt;/code&gt;: list a binary function into applicative&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;liftA2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f c
&lt;span style=&#34;color:#a6e22e&#34;&gt;liftA2&lt;/span&gt; f a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;sequenceA&lt;/code&gt;: Combine any amount of applicatives into one applicative that has a list of the results of those applicatives inside it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [f a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; (x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; xs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; sequenceA xs
&lt;span style=&#34;color:#75715e&#34;&gt;-- with the help of liftA2&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldr (liftA2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;)) (pure &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;law-of-applicative&#34;&gt;Law of Applicative&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure id &amp;lt;*&amp;gt; v = fmap id v = v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;monoids&#34;&gt;Monoids&lt;/h1&gt;
&lt;p&gt;A monoid is a semi-group with an identity element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	mempty &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m
	mappend &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m
	mconcat &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [m] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m
	moncat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldr mappend mempty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples-of-monoids&#34;&gt;Examples of Monoids&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; [a] &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
	mempty &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
	mappend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Product and Sum, Any and All&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {getProduct &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Ord&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Read&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Bounded&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Num&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monoid&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; a) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; 
	mempty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; x `mappend` &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Product&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Ordering Monoid&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
